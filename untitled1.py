# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rEJAiVwseksm_XbLLQlcT46K91Wyy5m4
"""

# Import necessary libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

# Load the 'diamonds' dataset from seaborn
diamonds_data = sns.load_dataset('diamonds')

# Display the first few rows of the dataset
print(diamonds_data.head())

# Explore the dataset
print(diamonds_data.info())

# Summary statistics
print(diamonds_data.describe())

# Visualize correlations between numerical features
correlation_matrix = diamonds_data.corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix')
plt.show()

# Visualize the distribution of the target variable 'price'
sns.histplot(diamonds_data['price'], bins=30, kde=True)
plt.title('Distribution of Diamond Prices')
plt.xlabel('Price')
plt.show()

# Selecting the features for prediction
selected_features = ['carat', 'cut', 'color', 'clarity', 'depth', 'table']
X = pd.get_dummies(diamonds_data[selected_features], drop_first=True)
y = diamonds_data['price']

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the Linear Regression model
model = LinearRegression()

# Train the model
model.fit(X_train, y_train)

# Make predictions on the test set
predictions = model.predict(X_test)

# Evaluate the model performance
mse = mean_squared_error(y_test, predictions)
r2 = r2_score(y_test, predictions)

print(f'Mean Squared Error: {mse}')
print(f'R-squared: {r2}')

# Visualize the results
plt.scatter(y_test, predictions, color='blue')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], linestyle='--', color='red', linewidth=2)
plt.title('Diamond Price Prediction')
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.show()

# Visualize individual feature importance
coef_df = pd.DataFrame({'Feature': X.columns, 'Coefficient': model.coef_})
coef_df = coef_df.sort_values(by='Coefficient', ascending=False)

plt.figure(figsize=(10, 6))
sns.barplot(x='Coefficient', y='Feature', data=coef_df, palette='viridis')
plt.title('Feature Importance')
plt.show()

# Visualize residuals
residuals = y_test - predictions
plt.scatter(predictions, residuals, color='green')
plt.hlines(y=0, xmin=min(predictions), xmax=max(predictions), linestyle='--', color='red', linewidth=2)
plt.title('Residuals Plot')
plt.xlabel('Predicted Values')
plt.ylabel('Residuals')
plt.show()